// <auto-generated />
using System;
using DLStat.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DLStat.API.Migrations
{
    [DbContext(typeof(AppDbConrtext))]
    [Migration("20240125075138_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DLStat.API.Models.Operative", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("OperativeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Operatives");
                });

            modelBuilder.Entity("DLStat.API.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PositionTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("DLStat.API.Models.ResponseMeasures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ByFSB")
                        .HasColumnType("int");

                    b.Property<int>("ByMVD")
                        .HasColumnType("int");

                    b.Property<int>("BySK")
                        .HasColumnType("int");

                    b.Property<DateTime>("FillDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OperativeId")
                        .HasColumnType("int");

                    b.Property<int>("Overall")
                        .HasColumnType("int");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<byte>("ReportingMonth")
                        .HasColumnType("tinyint");

                    b.Property<byte>("ReportingWeek")
                        .HasColumnType("tinyint");

                    b.Property<int>("ReportingYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperativeId");

                    b.HasIndex("PositionId");

                    b.ToTable("ResponseMeasures");
                });

            modelBuilder.Entity("DLStat.API.Models.ResponseMeasures", b =>
                {
                    b.HasOne("DLStat.API.Models.Operative", "Operative")
                        .WithMany()
                        .HasForeignKey("OperativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DLStat.API.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operative");

                    b.Navigation("Position");
                });
#pragma warning restore 612, 618
        }
    }
}
